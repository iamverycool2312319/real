local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Window = Rayfield:CreateWindow({
	Name = "Rayfield Example Window",
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Sirius",
	ConfigurationSaving = {
		Enabled = true,
		FileName = "Big Hub"
	},
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		Key = "ABCDEF"
	}
})
local Tab = Window:CreateTab("emulator mag")

local Section = Tab:CreateSection("e mags")


local Toggle = Tab:CreateToggle({
    Name = "e mags",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
	regtog = v
	if regtog == true then
		task.wait()
		teleportToClosestFootball()
	end
end})




local players = game:GetService("Players")
local userInputService = game:GetService("UserInputService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local remotes = replicatedStorage:FindFirstChild("Remotes")
local characterSoundEvent = remotes:FindFirstChild("CharacterSoundEvent")
local player = players.LocalPlayer
local runService = game:GetService("RunService")

local blatant = 0
local universal = 0
local uis = game:GetService("UserInputService")
local uniDelay = 0
local regDelay = 0
--Regular
-- Functions

local Players = game:GetService("Players")
local Mouse = Players.LocalPlayer:GetMouse()
local numTeleports = 30 -- Define the number of teleports
local tooggleEnabled = false -- Variable to track the toggle state

local function universalcatch()
	if tooggleEnabled then
		local catchRight = Players.LocalPlayer.Character:FindFirstChild("CatchRight")

		if not catchRight then
			return
		end

		local closestFootball = nil
		local closestDistance = math.huge

		for i, v in pairs(game.Workspace:GetDescendants()) do
			if v.Name == "Football" and v:IsA("BasePart") then
				local distance = (v.Position - catchRight.Position).Magnitude
				if distance < closestDistance and distance <= universal then
					v.CanCollide = false
					closestDistance = distance
					closestFootball = v
				end
			end
		end

		if closestFootball then
				wait(uniDelay)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 0)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 0)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 1)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 1)
			task.wait()
		end
	end
end

local regtog = false -- Variable to track the toggle state
--ballgui
local function teleportToClosestFootball()
	if regtog == true then
		task.wait()
		uis.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				local catchRight = Players.LocalPlayer.Character:FindFirstChild("CatchRight")

				if not catchRight then
					return
				end

				local closestFootball = nil
				local closestDistance = math.huge

				for i, v in pairs(game.Workspace:GetDescendants()) do
					if v.Name == "Football" and v:IsA("BasePart") then
						local distance = (v.Position - catchRight.Position).Magnitude
						if distance < closestDistance and distance <= blatant then
							v.CanCollide = false
							closestDistance = distance
							closestFootball = v
						end
					end
				end

				-- Teleport the closest football if found
				if closestFootball then
					for _ = 1, numTeleports do
						if regtog == true then
							wait(regDelay)
							local tweenService = game:GetService("TweenService")
							local tweenInfo = TweenInfo.new(.05, Enum.EasingStyle.Linear)
							tweenService:Create(closestFootball, tweenInfo, {CFrame = catchRight.CFrame}):Play()
							wait(.05)
						end
					end
				end
			end
		end)
	end
end












local Slider = Tab:CreateSlider({
	Name = "mag delay",
	Range = {0, 1},
	Increment = 1,
	Suffix = "mag range",
	CurrentValue = 0,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
	regDelay = v
end})

local Slider = Tab:CreateSlider({
	Name = "mag",
	Range = {1, 45},
	Increment = 1,
	Suffix = "mag range",
	CurrentValue = 0,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
	blatant = v
end})
