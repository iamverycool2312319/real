local ShuffleFunction = nil

local OldDebug
OldDebug = hookfunction(debug.info, function(...)
local Args = {...}

if Args[1] == 2 and Args[2] == "s" then
return "LocalScript"
end

return OldDebug(...)
end)

local OldBlock
OldBlock = hookmetamethod(game, '__namecall', function(Self, ...)
local Method = getnamecallmethod()
local Arguments = {...}

if Method == "fireServer" and Arguments[1] and Arguments[2] == "error" then
return
end

return OldBlock(Self, ...)
end)

task.wait()

for i, v in pairs(getgc()) do
if type(v) == "function" and getinfo(v).source:find("PlayerModule.LocalScript") then
if getinfo(v).numparams == 7 then
ShuffleFunction = v
break
end
end
end

if ShuffleFunction then
local OldShuffle
OldShuffle = hookfunction(ShuffleFunction, function(...)
local Args = {...}

local AllowedSets = (Args[2] == 655 and Args[3] == 775 and Args[4] == 724 and Args[5] == 633 and Args[6] == 891) or (Args[2] == 760 and Args[3] == 760 and Args[4] == 771 and Args[5] == 665 and Args[6] == 898) or (Args[2] == 660 and Args[3] == 759 and Args[4] == 751 and Args[5] == 863 and Args[6] == 771)

if not AllowedSets then
return warn(table.unpack(Args))
else
return OldShuffle(unpack(Args))
end

return OldShuffle(...)
end)
end

for Index, Value in pairs(getgc()) do
if type(Value) == 'function' and getinfo(Value).source:find("PlayerModule.LocalScript") then
for Index2, Value2 in getconstants(Value) do
if Value2 == 4000001 then
setconstant(Value, Index2, 1)
end

if Value2 == 20.03 then
setconstant(Value, Index2, 100)
end

if Value2 == 50.03 then
setconstant(Value, Index2, 100)
end
end
end
end

print('Made by ly_hur 2024 version')
task.wait(1)
print('10%')
task.wait(1)
print('20%')
task.wait(1)
print('30%')
task.wait(1)
print('40%')
task.wait(1)
print('50%')
task.wait(1)
print('60%')
task.wait(1)
print('70%')
task.wait(1)
print('80%')
task.wait(1)
print('90%')
task.wait(1)
print('100%')





task.wait(1)

  -- Send notification
    game.StarterGui:SetCore("SendNotification", {
        Title = "EcpliseHub Completed!",
        Text = "Bypass made by ly_hur!",
        Duration = 6 -- Adjust notification duration as needed
    })

print('MetaBypass, Done Now Loading!')

--> UI Initialization
local MakoLib = loadstring(game:HttpGet("https://gist.githubusercontent.com/N2TheLegend/bc773f2cb81cff790e1929e40ce83664/raw/9746b17e8537d53cd32c45f311eb949f1b553f07/Mako.lua",true))()

local Window = MakoLib:CreateWindow({
    Title = "Meta Hub "
})

local MainTab = Window:CreateTab("Main", 13594361489)
local CharacterTab = Window:CreateTab("Player", 13585011079)
local PhysicsTab = Window:CreateTab("Physics")

--> Section Stuff
local QBAimbot = MainTab:CreateSection("QB Aimbot", 13594361489)
local FootballMagnents = MainTab:CreateSection("Magnents", 13594361489)
local PassingStuff = MainTab:CreateSection("Passing", 13594361489)
local Physics = PhysicsTab:CreateSection("Dive Vector")
local Misc = CharacterTab:CreateSection("Misc", 13585011079)
local Movement = CharacterTab:CreateSection("Movement", 13585011079)

--> Variables For Callbacks
getgenv().qbaimbotenabled = false
getgenv().showArcTracer = false
getgenv().predictBallArc = false
getgenv().autoAngle = false
getgenv().hideDeco = false
getgenv().customLead = 0
getgenv().customTargetHeight = 0
getgenv().AutoLeadDistance = false

getgenv().Football_Magnents = false
getgenv().Pull_Vector = false

getgenv().Football_DistanceCatch = 0
getgenv().Football_Vector = 0

getgenv().Custom_WalkSpeed = false
getgenv().Custom_JumpPower = false

getgenv().Magnent_Mode = nil

--> Toggles and Sliders Setup
QBAimbot:CreateToggle({
  Title = "Predict Ball Arc",
  Binding = false,
  CurrentValue = false,
  Callback = function(Value)
    if (getgenv().qbaimbotenabled) then
        getgenv().predictBallArc = Value
    end
  end,
})


QBAimbot:CreateToggle({
  Title = "Aimbot Enabled",
  Binding = false,
  CurrentValue = false,
  Callback = function(Value)
    getgenv().qbaimbotenabled = Value
  end,
})

QBAimbot:CreateToggle({
  Title = "Auto Angle",
  Binding = false,
  CurrentValue = false,
  Callback = function(Value)
    if (getgenv().qbaimbotenabled) then
      getgenv().autoAngle = Value
    end
  end,
})

QBAimbot:CreateToggle({
  Title = "Show Arc Tracer",
  Binding = false,
  CurrentValue = false,
  Callback = function(Value)
    if (getgenv().qbaimbotenabled) then
      getgenv().showArcTracer = Value
    end
  end,
})

QBAimbot:CreateToggle({
    Title = "Hide ESP & Highlight",
    Binding = false,
    CurrentValue = false,
    Callback = function(Value)
        if (getgenv().qbaimbotenabled) then
            getgenv().hideDeco = Value
        end
    end,
})





FootballMagnents:CreateToggle({
    Title = "Enabled",
    Binding = false,
    CurrentValue = false,
    Callback = function(Value)
        getgenv().Football_Magnents = Value
    end,
})

FootballMagnents:CreateDropdown({
    Title = "Mag Type",
    Options = {"Regular", "Blatant", "Legit"},
    CurrentOption = "Regular",
    Callback = function(Value)
        if (getgenv().Football_Magnents) then
            
        end
    end,
})

local autodist = 10

local function autoCatch()
    while true do
        task.wait()
        local ball = workspace:FindFirstChild("Football")
        if ball and ball.ClassName == "BasePart" then
            local distance = (ball.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < autodist then
                game:GetService("ReplicatedStorage").Remotes.CharacterSoundEvent:fireServer("PlayerActions", "catch")
                task.wait(1.5)
            end
        end
    end
end

FootballMagnents:CreateToggle({
    Title = "Auto Catch",
    Binding = false,
    CurrentValue = false,
    Callback = function(value)
        if value then
            autoCatch()
        end
    end,
})

FootballMagnents:CreateSlider({
    Title = "Auto Catch Distance",
    CurrentValue = 0,
    Range = {0, 10},
    Callback = function(value)
        autodist = value
    end,
})

local AS_Enabled = false

FootballMagnents:CreateToggle({
    Title = "Auto Swat",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
        AS_Enabled = v
        while wait() do
            if AS_Enabled == true then
                local HRP = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                for i,v in pairs(workspace:GetChildren()) do
                    if v.Name == "Football" and v:IsA("BasePart") and ((v.Position - HRP.Position).Magnitude <= 30) == true then  
                        keypress(0x52)
                        keyrelease(0x52)
                    end
                end
            end
        end
    end,
})

FootballMagnents:CreateSlider({
    Title = "Mag Distance",
    CurrentValue = 0,
    Range = {0, 120},
    Callback = function(Value)
        if (getgenv().Football_Magnents) then
            getgenv().Football_DistanceCatch = Value
        end
    end,
})

PassingStuff:CreateToggle({
    Title = "Auto Lead Distance",
    Binding = false,
    CurrentValue = false,
    Callback = function(Value)
        if (getgenv().qbaimbotenabled) then
            getgenv().AutoLeadDistance = Value
        end
    end,
})

PassingStuff:CreateSlider({
    Title = "Custom Target Height Offset",
    CurrentValue = 0,
    Range = {0, 10},
    Callback = function(Value)
        if (getgenv().qbaimbotenabled) and (getgenv().AutoLeadDistance) then
            getgenv().customTargetHeight = Value
        end
    end,
})

PassingStuff:CreateSlider({
    Title = "Custom Lead Distance",
    CurrentValue = 0,
    Range = {0, 10},
    Callback = function(Value)
        if (getgenv().qbaimbotenabled) then
            getgenv().customLead = Value
        end
    end,
})



Movement:CreateToggle({
    Title = "Custom WalkSpeed Enabled",
    Binding = false,
    CurrentValue = false,
    Callback = function(Value)
        getgenv().Custom_WalkSpeed = Value
    end,
})

Movement:CreateSlider({
    Title = "Custom WalkSpeed Amount",
    CurrentValue = 20,
    Range = {20, 29},
    Callback = function(Value)
      task.spawn(function()
          while task.wait() do
              if (getgenv().Custom_WalkSpeed) == true then
                  game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
                end
            end
        end)
    end,
})

Movement:CreateToggle({
    Title = "Custom JumpPower Enabled",
    Binding = false,
    CurrentValue = false,
    Callback = function(Value)
        getgenv().Custom_JumpPower = Value
    end,
})

local autokick = false 

task.spawn(function()

getgenv().Variables = {}

	Variables.Players = game:GetService("Players")
	Variables.ReplicatedStorage = game:GetService("ReplicatedStorage")
	Variables.UserInputService = game:GetService("UserInputService")
	Variables.Client = Variables.Players.LocalPlayer
	Variables.Character = Variables.Client.Character or Variables.Client.CharacterAdded:Wait()

	Variables.Client.CharacterAdded:Connect(function(Character)
		Variables.Character = Character 
	end)

	local Aimbot = {}

	function Aimbot:GetAccuracyArrow(Arrows)
		local Y = 0
		local Arrow1 = nil

		for _, Arrow in pairs(Arrows) do
			if Arrow.Position.Y.Scale > Y then
				Y = Arrow.Position.Y.Scale
				Arrow1 = Arrow 
			end
		end

		return Arrow1
	end

	Variables.Client.PlayerGui.ChildAdded:Connect(function(child)
		if child.Name == "KickerGui" and autokick == true then
			local KickerGui = child 
			local Meter = KickerGui:FindFirstChild("Meter")
			local Cursor = Meter:FindFirstChild("Cursor")
			local Arrows = {}

			for i,v in pairs(Meter:GetChildren()) do
				if string.find(v.Name:lower(), "arrow") then
					table.insert(Arrows, v)
				end
			end 

			repeat task.wait() until Cursor.Position.Y.Scale < 0.02
			mouse1click()
			repeat task.wait() until Cursor.Position.Y.Scale >= Aimbot:GetAccuracyArrow(Arrows).Position.Y.Scale + (.03 / (100 / 100))
			mouse1click()
		end
	end)
end)

Misc:CreateToggle({
    Title = "kicker aimbot dont click", 
    Binding = false,
    CurrentValue = false,
    Callback =function(v)
	autokick = v
end})

Movement:CreateToggle({
    Title = "finish captain race", 
    Binding = false,
    CurrentValue = false,
    Callback = function()
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Models.LockerRoomA.FinishLine.CFrame + Vector3.new(0, 2, 0)
end})

local function beamProjectile(g, v0, x0, t1) -- easy egomoose copy!
    -- calculate the bezier points
    local c = 0.5*0.5*0.5;
    local p3 = 0.5*g*t1*t1 + v0*t1 + x0;
    local p2 = p3 - (g*t1*t1 + v0*t1)/3;
    local p1 = (c*g*t1*t1 + 0.5*v0*t1 + x0 - c*(x0+p3))/(3*c) - p2;

    -- the curve sizes
    local curve0 = (p1 - x0).magnitude;
    local curve1 = (p2 - p3).magnitude;

    -- build the world CFrames for the attachments
    local b = (x0 - p3).unit;
    local r1 = (p1 - x0).unit;
    local u1 = r1:Cross(b).unit;
    local r2 = (p2 - p3).unit;
    local u2 = r2:Cross(b).unit;
    b = u1:Cross(r1).unit;

    local cf1 = CFrame.new(
        x0.x, x0.y, x0.z,
        r1.x, u1.x, b.x,
        r1.y, u1.y, b.y,
        r1.z, u1.z, b.z
    )

    local cf2 = CFrame.new(
        p3.x, p3.y, p3.z,
        r2.x, u2.x, b.x,
        r2.y, u2.y, b.y,
        r2.z, u2.z, b.z
    )

    return curve0, -curve1, cf1, cf2;
end



--pull
PassingStuff:CreateToggle({
    Title = "qb aim predictions", 
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
	if v and not toggleActive then
		toggleActive = true
		eventConnection = workspace.ChildAdded:Connect(function(b)
			if b.Name == "Football" and b:IsA("BasePart") then
				task.wait()
				local vel = b.Velocity
				local pos = b.Position
				local c0, c1, cf1, cf2 = beamProjectile(Vector3.new(0, -28, 0), vel, pos, 10)
				local beam = Instance.new("Beam")
				local a0 = Instance.new("Attachment")
				local a1 = Instance.new("Attachment")
				beam.Color = ColorSequence.new(predictioncolor)
				beam.Transparency = NumberSequence.new(0, 0)
				beam.CurveSize0 = c0
				beam.CurveSize1 = c1
				beam.Name = "Hitbox"
				beam.Parent = workspace.Terrain
				beam.Transparency = NumberSequence.new({
					NumberSequenceKeypoint.new(0, 1),
					NumberSequenceKeypoint.new(0.01, 0),
					NumberSequenceKeypoint.new(1, 0),
					NumberSequenceKeypoint.new(1, 0.01),
				})
				beam.Segments = 1750
				a0.Parent = workspace.Terrain
				a1.Parent = workspace.Terrain
				a0.CFrame = a0.Parent.CFrame:Inverse() * cf1
				a1.CFrame = a1.Parent.CFrame:Inverse() * cf2
				beam.Attachment0 = a0
				beam.Attachment1 = a1
				beam.Width0 = 0.5
				beam.Width1 = 0.5
				repeat task.wait() until b.Parent ~= workspace
				a0:Destroy()
				a1:Destroy()
			end
		end)
	elseif not Value and toggleActive then
		toggleActive = false
		if eventConnection then
			eventConnection:Disconnect()
		end
	end
end})
PassingStuff:CreateDropdown({
    Title = "Predictions Color",
    Options = {"White", "Blue", "Red", "Pink", "Green"},
    CurrentOption = "White",
    Callback = function(v)
        if v == "White" then
            predictioncolor = Color3.fromRGB(255, 255, 255)
        elseif v == "Blue" then
            predictioncolor = Color3.fromRGB(0, 212, 255)
        elseif v == "pink" then
            predictioncolor = Color3.fromRGB(253, 137, 245)
        elseif v == "Red" then
            predictioncolor = Color3.fromRGB(255, 0, 0)
        elseif v == "Green" then
            predictioncolor = Color3.fromRGB(0, 255, 115)
        end
    end})








Movement:CreateToggle({
    Title = "tp tackle", 
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
	if v then
		connection = game.Players.LocalPlayer:GetMouse().Button1Down:Connect(function()
			for i, v in pairs(game.workspace:GetDescendants()) do
				if v.Name == "Football" and v:IsA("Tool") then
					local toolPosition = v.Parent.HumanoidRootPart.Position
					local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
					if (toolPosition - playerPosition).Magnitude <= tprange then
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Parent.HumanoidRootPart.CFrame + Vector3.new(1, 1, 1)
					end
				end
			end
		end)
	else
		if connection then
			connection:Disconnect() -- Disconnect the mouse click event only if it exists
		end
	end
end})

Movement:CreateSlider({
    Title = "tp range tackle",
    CurrentValue = 0,
    Range = {0, 15},
    Callback = function(v)
	tprange = v
end})


local function updateCollisionState()
	while true do
		if isAntiJamEnabled then
			if game.Players.LocalPlayer.Character.Head.CanCollide then
				for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
					if player ~= game.Players.LocalPlayer then
						pcall(function()
							player.Character.Torso.CanCollide = false
							player.Character.Head.CanCollide = false
						end)
					end
				end
			end
		else
			if not game.Players.LocalPlayer.Character.Head.CanCollide then
				game.Players.LocalPlayer.Character.Torso.CanCollide = true
				game.Players.LocalPlayer.Character.Head.CanCollide = true
			end
		end
		task.wait()
	end
end

Misc:CreateToggle({
    Title = "antijam", 
    Binding = false,
    CurrentValue = false,
    Callback = function(enabled)
	isAntiJamEnabled = enabled
end})


Movement:CreateToggle({
    Title = "TP to Home Endzone", 
    Binding = false,
    CurrentValue = false,
    Callback = function()
	local Teleport1 = function(XP, YP, ZP)
		local XTpEvery = 8
		local YTpEvery = 1
		local ZTpEvery = 8
		local Timer = 0.2
		local pos = game:GetService('Players').LocalPlayer.Character.HumanoidRootPart
		if pos.Position.X < XP then
			for x = pos.Position.X, XP, XTpEvery do
				game.Players.LocalPlayer.Character:MoveTo(Vector3.new(x, pos.Position.Y, pos.Position.Z))
				local part = Instance.new("Part", workspace)
				part.Anchored = true
				part.Size = Vector3.new(10, 0.1, 10)
				part.Material = "Glass"
				part.BrickColor = BrickColor.Random()
				part.Transparency = 1
				part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
				wait(Timer)
				part:Destroy()
			end
		else
			for x = pos.Position.X, XP, -XTpEvery do
				game.Players.LocalPlayer.Character:MoveTo(Vector3.new(x, pos.Position.Y, pos.Position.Z))
				local part = Instance.new("Part", workspace)
				part.Anchored = true
				part.Size = Vector3.new(10, 0.1, 10)
				part.Material = "Glass"
				part.BrickColor = BrickColor.Random()
				part.Transparency = 1
				part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
				wait(Timer)
				part:Destroy()
			end
		end
		if pos.Position.Z < ZP then
			for z = pos.Position.Z, ZP, ZTpEvery do
				game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, pos.Position.Y, z))
				local part = Instance.new("Part", workspace)
				part.Anchored = true
				part.Size = Vector3.new(10, 0.1, 10)
				part.Material = "Glass"
				part.BrickColor = BrickColor.Random()
				part.Transparency = 1
				part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
				wait(Timer)
				part:Destroy()
			end
		else
			for z = pos.Position.Z, ZP, -ZTpEvery do
				game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, pos.Position.Y, z))
				local part = Instance.new("Part", workspace)
				part.Anchored = true
				part.Size = Vector3.new(10, 0.1, 10)
				part.Material = "Glass"
				part.BrickColor = BrickColor.Random()
				part.Transparency = 1
				part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
				wait(Timer)
				part:Destroy()
			end
		end
		if pos.Position.Y < YP then
			for High = pos.Position.Y, YP, YTpEvery do
				game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, High, pos.Position.Z))
				local part = Instance.new("Part", workspace)
				part.Anchored = true
				part.Size = Vector3.new(10, 0.1, 10)
				part.Material = "Glass"
				part.BrickColor = BrickColor.Random()
				part.Transparency = 1
				part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
				wait(Timer)
				part:Destroy()
			end
		else
			for High = pos.Position.Y, YP, -YTpEvery do
				game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, High, pos.Position.Z))
				local part = Instance.new("Part", workspace)
				part.Anchored = true
				part.Size = Vector3.new(10, 0.1, 10)
				part.Material = "Glass"
				part.BrickColor = BrickColor.Random()
				part.Transparency = 1
				part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
				wait(Timer)
				part:Destroy()
			end
		end
		game.Players.LocalPlayer.Character:MoveTo(Vector3.new(XP, YP, ZP))
	end

	Teleport1(2, 6, -169)
end})

Movement:CreateToggle({
    Title = "TP to away Endzone",
    Binding = false,
    CurrentValue = false,
    Callback =  function()
		local Teleport1 = function(XP, YP, ZP)
			local XTpEvery = 8
			local YTpEvery = 1
			local ZTpEvery = 8
			local Timer = 0.2
			local pos = game:GetService('Players').LocalPlayer.Character.HumanoidRootPart
			if pos.Position.X < XP then
				for x = pos.Position.X, XP, XTpEvery do
					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(x, pos.Position.Y, pos.Position.Z))
					local part = Instance.new("Part", workspace)
					part.Anchored = true
					part.Size = Vector3.new(10, 0.1, 10)
					part.Material = "Glass"
					part.BrickColor = BrickColor.Random()
					part.Transparency = 1
					part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
					wait(Timer)
					part:Destroy()
				end
			else
				for x = pos.Position.X, XP, -XTpEvery do
					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(x, pos.Position.Y, pos.Position.Z))
					local part = Instance.new("Part", workspace)
					part.Anchored = true
					part.Size = Vector3.new(10, 0.1, 10)
					part.Material = "Glass"
					part.BrickColor = BrickColor.Random()
					part.Transparency = 1
					part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
					wait(Timer)
					part:Destroy()
				end
			end
			if pos.Position.Z < ZP then
				for z = pos.Position.Z, ZP, ZTpEvery do
					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, pos.Position.Y, z))
					local part = Instance.new("Part", workspace)
					part.Anchored = true
					part.Size = Vector3.new(10, 0.1, 10)
					part.Material = "Glass"
					part.BrickColor = BrickColor.Random()
					part.Transparency = 1
					part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
					wait(Timer)
					part:Destroy()
				end
			else
				for z = pos.Position.Z, ZP, -ZTpEvery do
					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, pos.Position.Y, z))
					local part = Instance.new("Part", workspace)
					part.Anchored = true
					part.Size = Vector3.new(10, 0.1, 10)
					part.Material = "Glass"
					part.BrickColor = BrickColor.Random()
					part.Transparency = 1
					part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
					wait(Timer)
					part:Destroy()
				end
			end
			if pos.Position.Y < YP then
				for High = pos.Position.Y, YP, YTpEvery do
					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, High, pos.Position.Z))
					local part = Instance.new("Part", workspace)
					part.Anchored = true
					part.Size = Vector3.new(10, 0.1, 10)
					part.Material = "Glass"
					part.BrickColor = BrickColor.Random()
					part.Transparency = 1
					part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
					wait(Timer)
					part:Destroy()
				end
			else
				for High = pos.Position.Y, YP, -YTpEvery do
					game.Players.LocalPlayer.Character:MoveTo(Vector3.new(pos.Position.X, High, pos.Position.Z))
					local part = Instance.new("Part", workspace)
					part.Anchored = true
					part.Size = Vector3.new(10, 0.1, 10)
					part.Material = "Glass"
					part.BrickColor = BrickColor.Random()
					part.Transparency = 1
					part.Position = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, -3.05, 0)
					wait(Timer)
					part:Destroy()
				end
			end
			game.Players.LocalPlayer.Character:MoveTo(Vector3.new(XP, YP, ZP))
		end

		Teleport1(-0, 6, 164)
	end})








Movement:CreateSlider({
    Title = "Custom JumpPower Amount",
    CurrentValue = 50,
    Range = {50, 80},
    Callback = function(Value)
      task.spawn(function()
          while task.wait() do
              if (getgenv().Custom_JumpPower) == true then
                  game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Value
                end
            end
        end)
    end,
})


















task.spawn(function()
    game:GetService("RunService").Heartbeat:Connect(function()
        for _, Value in pairs(workspace:GetChildren()) do
            if Value.Name == "Football" and Value:IsA("BasePart") then
                local Direction = (Value.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Unit

                if game:GetService("Players").LocalPlayer:DistanceFromCharacter(Value.Position) <= getgenv().Football_Vector and getgenv().Pull_Vector then
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Velocity = Direction * (getgenv().Football_Vector)
                end
            end
        end
    end)
end)

Misc:CreateToggle({
    Title = "Anti Admin",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
        if v then
            local moderators = {
                "2618937233503944727",
                "209187780079648778",
                "265544447129812992",
                "677964655821324329",
                "469043698110562304",
                "792145568586792979",
                "490537796940070915",
                "678699048844132362",
                "837514415480897607",
                "417141199564963840",
                "580140563295109148",
                "231225289718497281",
                "719258236930228346",
                "345362950380322829",
                "513196564236468226",
                "241945212463742986",
                "153379470164623360",
              }

             for index, value in pairs(game:GetService("Players"):GetPlayers()) do
                if table.find(moderators, value.UserId) then
                    game:GetService("Players").LocalPlayer:kick("An Admin has joined! Make sure to keep this enabled for extra caution next time!")
                end
            end
        end
    end,
})

local Tracers = {}
local DistanceLabels = {}
local tracerEnabled = false

function AttachBall(Ball)
    local RootPart = Players.LocalPlayer.Character and Players.LocalPlayer..Character.PrimaryPart

    if RootPart and Ball then
        local Tracer = Drawing.new("Line")
        Tracer.Visible = false
        Tracer.Color = Color3.fromRGB(255, 0, 0)
        Tracer.Thickness = 1
        Tracer.Transparency = 1

        local TextLabel = Drawing.new("Text")
        TextLabel.Text = ""
        TextLabel.Transparency = 1
        TextLabel.Visible = false
        TextLabel.Color = Color3.fromRGB(255, 0, 0)
        TextLabel.Size = 25

        local con
        con = game:GetService("RunService").RenderStepped:Connect(function()
            if RootPart.Parent and Ball.Parent and tracerEnabled then
                local Vector, OnScreen = game.Workspace.CurrentCamera:WorldToViewportPoint(Ball.Position)
                local Vector2_, OnScreen2 = game.Workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
                local Distance = (RootPart.Position - Ball.Position).Magnitude

                if OnScreen and OnScreen2 then
                    Tracer.From = Vector2.new(Vector2_.X, Vector2_.Y)
                    Tracer.To = Vector2.new(Vector.X, Vector.Y)
                    Tracer.Visible = true
                    TextLabel.Visible = true

                    TextLabel.Text = tostring(math.floor(Distance)) .. " studs away"
                    TextLabel.Position = Vector2.new(Vector.X, Vector.Y)

                    if Distance <= 50 then
                        TextLabel.Color = Color3.fromRGB(0, 255, 0)
                        Tracer.Color = Color3.fromRGB(0, 255, 0)
                    else
                        TextLabel.Color = Color3.fromRGB(255, 0, 0)
                        Tracer.Color = Color3.fromRGB(255, 0, 0)
                    end
                else
                    Tracer.Visible = false
                    TextLabel.Visible = false
                end
            else
                con:Disconnect()
                Tracer.Visible = false
                TextLabel.Visible = false
            end
        end)
        table.insert(Tracers, Tracer)
        table.insert(DistanceLabels, TextLabel)
    end
end


workspace.ChildAdded:Connect(function(child)
    if child.Name == "Football" then
        if tracerEnabled then
            AttachBall(child)
        end
    end
end)



local Players = game:GetService("Players")
local Mouse = Players.LocalPlayer:GetMouse()
local numTeleports = 30 -- Define the number of teleports
local tooggleEnabled = false -- Variable to track the toggle state


local function universalcatch()
	if tooggleEnabled then
		local catchRight = Players.LocalPlayer.Character:FindFirstChild("CatchRight")

		if not catchRight then
			return
		end

		local closestFootball = nil
		local closestDistance = math.huge

		for i, v in pairs(game.Workspace:GetDescendants()) do
			if v.Name == "Football" and v:IsA("BasePart") then
				local distance = (v.Position - catchRight.Position).Magnitude
				if distance < closestDistance and distance <= universal then
					v.CanCollide = false
					closestDistance = distance
					closestFootball = v
				end
			end
		end

		if closestFootball then
				wait(uniDelay)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 0)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 0)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 1)
			firetouchinterest(game.Players.LocalPlayer.Character["CatchRight"], closestFootball, 1)
			task.wait()
		end
	end
end

local regtog = false -- Variable to track the toggle state

local function teleportToClosestFootball()
	if regtog == true then
		task.wait()
		uis.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				local catchRight = Players.LocalPlayer.Character:FindFirstChild("CatchRight")

				if not catchRight then
					return
				end

				local closestFootball = nil
				local closestDistance = math.huge

				for i, v in pairs(game.Workspace:GetDescendants()) do
					if v.Name == "Football" and v:IsA("BasePart") then
						local distance = (v.Position - catchRight.Position).Magnitude
						if distance < closestDistance and distance <= blatant then
							v.CanCollide = false
							closestDistance = distance
							closestFootball = v
						end
					end
				end

				-- Teleport the closest football if found
				if closestFootball then
					for _ = 1, numTeleports do
						if regtog == true then
							wait(regDelay)
							local tweenService = game:GetService("TweenService")
							local tweenInfo = TweenInfo.new(.05, Enum.EasingStyle.Linear)
							tweenService:Create(closestFootball, tweenInfo, {CFrame = catchRight.CFrame}):Play()
							wait(.05)
						end
					end
				end
			end
		end)
	end
end

Misc:CreateToggle({
    Title = "ms by lyv1",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
	tooggleEnabled = v
	while tooggleEnabled == true do
		task.wait()
		universalcatch()
	end
end})

Misc:CreateSlider({
    Title = "delay",
    CurrentValue = 0,
    Range = {0, 15},
    Callback = function(v)
	uniDelay = v
end})

Misc:CreateSlider({
    Title = "range",
    CurrentValue = 0,
    Range = {0, 50},
    Callback = function(v)
	universal = v
end})



Misc:CreateToggle({
    Title = "ms by lyv2",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
	regtog = v
	if regtog == true then
		task.wait()
		teleportToClosestFootball()
	end
end})

Misc:CreateSlider({
    Title = "delay",
    CurrentValue = 0,
    Range = {0, 15},
    Callback = function(v)
	regDelay = v
end})

Misc:CreateSlider({
    Title = "range",
    CurrentValue = 0,
    Range = {0, 15},
    Callback = function(v)
	blatant = v
end})




Misc:CreateToggle({
    Title = "Ball Tracer",
    Binding = false,
    CurrentValue = false,
    Callback = function(enabled)
        tracerEnabled = enabled

        if not enabled then
            for _, tracer in ipairs(Tracers) do
                    tracer:Remove()
                end

                for _, label in ipairs(DistanceLabels) do
                    label:Remove()
                end
                Tracers = {}
                DistanceLabels = {}
        else
            for _, child in ipairs(workspace:GetChildren()) do
                if child.Name == "Football" then
                    AttachBall(child)
                end
            end
        end
    end,
})

Misc:CreateToggle({
    Title = "Change Weather To Rain",
    Binding = false,
    CurrentValue = false,
    Callback = function(value)
        IsSnow = value 

        if IsSnow  == true then
            for i,v in pairs(workspace.SkyWeather:GetChildren()) do
                if v.Name == "Snow" then
                    v.Enabled = true
                end
            end
        else
            for i,v in pairs(workspace.SkyWeather:GetChildren()) do
                if v.Name == "Snow" then
                    v.Enabled = false
                end
            end
        end
    end,
})

Misc:CreateToggle({
    Title = "FPS Boost",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
        local decalsyeeted = v
        local g = game
        local w = g.Workspace
        local l = g.Lighting
        local t = w.Terrain
        t.WaterWaveSize = 0
        t.WaterWaveSpeed = 0
        t.WaterReflectance = 0
        t.WaterTransparency = 0
        l.GlobalShadows = false
        l.FogEnd = 9e9
        l.Brightness = 0
        settings().Rendering.QualityLevel = "Level01"
        for i, v in pairs(g:GetDescendants()) do
            if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
                v.Transparency = 1
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(0)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 1
                v.BlastRadius = 1
            elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
                v.Enabled = false
            elseif v:IsA("MeshPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
                v.TextureID = 10385902758728957
            end
        end
        for i, e in pairs(l:GetChildren()) do
          if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
                e.Enabled = false
            end
        end
    end,
})


Misc:CreateToggle({
  Title = "Underground",
    Binding = false,
    CurrentValue = false,
    Callback = function(state)
        state = state
        local function toggleField(state)
            local model = game.Workspace.Models.Field.Grass
            local transparency = state and 1 or 0
            for _, part in pairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not state
                    part.Transparency = transparency
                end
            end

            if state then
                local platform = Instance.new("Part")
                platform.Size = Vector3.new(500, 0.001, 500)
                platform.Position = Vector3.new(10.3562937, -2.51527438, 30.4708614)
                platform.Anchored = true
                platform.Parent = game.Workspace

                local colors = {
                    BrickColor.new("Light gray")
                }

                local currentIndex = 1

                while state do
                    platform.BrickColor = colors[currentIndex]
                    currentIndex = currentIndex % #colors + 1

                    wait(1)

                end
            end
        end

        toggleField(state)

        local player = game.Players.LocalPlayer
        local character = player.Character

        local function setPlayerTransparency(transparency)
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = transparency
                end
            end
        end

        setPlayerTransparency(0.6)
    end,
})

local LocalPlayer = game:GetService("Players").LocalPlayer
local dv = false
local dvdist = 15

local function dv()
    for _, Value in pairs(workspace:GetChildren()) do
        if Value.Name == "Football" and Value:IsA("BasePart") then
            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - Value.Position).Magnitude

            if distance <= dvdist then
                local direction = (Value.Position - LocalPlayer.Character.HumanoidRootPart.Position).Unit
                LocalPlayer.Character.HumanoidRootPart.Velocity = direction * 15
            end
        end
    end
end

LocalPlayer:GetMouse().KeyDown:Connect(function(Key)
    if Key == string.lower("e") then
        if dv then
            dv()
        end
    end
end)


Physics:CreateToggle({
    Title = "Dive Vector",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
        dv = v
    end,
})

Physics:CreateSlider({
    Title = "Dive Vector Distance",
    CurrentValue = 0,
    Range = {0, 15},
    Callback = function(v)
        dvdist = v
    end,
})


--> QB Aimbot

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Gui = game:GetObjects("rbxassetid://14769142268")[1]

local locked = false
local target = nil

local Part = Instance.new("Part")
Part.Parent = workspace
Part.Anchored = true
Part.Size = Vector3.new(3, 1, 3)
Part.CanCollide = false

local Beam = Instance.new("Beam")
Beam.Parent = workspace.Terrain

local Highlight = Instance.new("Highlight")
Highlight.FillColor = Color3.fromRGB(255, 11, 202)
Highlight.OutlineColor = Color3.fromRGB(255, 255, 255)

local Attachment0, Attachment1 = Instance.new("Attachment"), Instance.new("Attachment")
Attachment0.Parent = workspace.Terrain
Attachment1.Parent = workspace.Terrain

Beam.Width0 = 0.5
Beam.Width1 = 0.5
Beam.Transparency = NumberSequence.new(0)
Beam.Color = ColorSequence.new(Color3.fromRGB(255, 11, 202))
Beam.Attachment0 = Attachment0
Beam.Segments = 3000
Beam.Attachment1 = Attachment1

local data = {
    Angle = 40,
    Power = 0,
    Direction = Vector3.new(0, 0, 0)
}

local passTypeLeads = {
    ["Dime"] = 2,
    ["Jump"] = 6,
    ["Mag"] = 12,
}

local passTypeSwitch = {
    ["Dime"] = "Jump",
    ["Jump"] = "Mag",
    ["Mag"] = "Dime"
}

local passType = "Dime"

--[[do
    local WhitelistedMousePart = Instance.new("Part")
    WhitelistedMousePart.Size = Vector3.new(2048, 1, 2048)
    WhitelistedMousePart.Anchored = true
    WhitelistedMousePart.Transparency = 1
    WhitelistedMousePart.Position = Player.Character.HumanoidRootPart.Position - Vector3.new(0, 4, 0)
    WhitelistedMousePart.CanCollide = false
    WhitelistedMousePart.Parent = workspace

    local MouseRaycastParams = RaycastParams.new()
    MouseRaycastParams.FilterType = Enum.RaycastFilterType.Include
    MouseRaycastParams.FilterDescendantsInstances = { WhitelistedMousePart }
    Mouse:SetRaycastParams(MouseRaycastParams)
end--]]

-- Helper Functions

local function InverseCosine(degrees)
    return math.cos(math.rad(degrees))
end

local function CalculateTimeToPeak(from, to, height)
    local g = Vector3.new(0, -28, 0)
    local conversionFactor = 4
    local xMeters = height * conversionFactor

    local a = 0.5 * g.Y
    local b = to.Y - from.Y
    local c = xMeters - from.Y

    local discriminant = b * b - 4 * a * c
    if discriminant < 0 then
        return nil
    end

    local t1 = (-b + math.sqrt(discriminant)) / (2 * a)
    local t2 = (-b - math.sqrt(discriminant)) / (2 * a)

    local t = math.max(t1, t2)
    return t
end

local function CalculateLanding(power, direction)
    local origin = Player.Character.Head.Position + direction * 5
    local velocity = power * direction
    local t = (velocity.Y / 28) * 2
    return origin + Vector3.new(velocity.X * t, 0, velocity.Z * t), t
end

local function FindPossibleCatchers(power, direction)
    local velocity = power * direction
    local landing, airtime = CalculateLanding(power, direction)
    local catchers = {}

    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - landing).Magnitude

            if distance < (20 * airtime) + 10 then
                catchers[#catchers + 1] = player
            end
        end
    end

    return catchers
end

local function CalculatePeakHeight(from, to, angle)
    local unitY = 1 - InverseCosine(angle)
    local distance = (from - to).Magnitude
    return unitY * distance
end

local function CalculateVelocity(from, to, time)
    local g = Vector3.new(0, -28, 0)
    local v0 = (to - from - 0.5 * g * time * time) / time
    local dir = ((from + v0) - from).Unit
    local power = v0.Y / dir.Y
    return v0, dir, math.clamp(math.round(power), 0, 95)
end

local function FindTarget()
    local nearestPart = nil
    local nearestDistance = math.huge

    local searchParts = { workspace }
    if workspace:FindFirstChild("npcwr") then
        table.insert(searchParts, workspace.npcwr.a)
        table.insert(searchParts, workspace.npcwr.b)
    end

    for _, part in pairs(searchParts) do
        for _, child in pairs(part:GetChildren()) do
            if child:FindFirstChildWhichIsA("Humanoid") and child:FindFirstChild("HumanoidRootPart") then
                local player = Players:GetPlayerFromCharacter(child)

                if player == Player then
                    continue
                end

                if not player and game.PlaceId ~= 8206123457 then
                    continue
                end

                if not Player.Neutral then
                    if player.Team ~= Player.Team then
                        continue
                    end
                end

                local distance = (child.HumanoidRootPart.Position - Mouse.Hit.Position).Magnitude

                if distance < nearestDistance then
                    nearestDistance = distance
                    nearestPart = child
                end
            end
        end
    end

    return nearestPart
end

local function GetMoveDirection(target)
    if Players:GetPlayerFromCharacter(target) then
        return target.Humanoid.MoveDirection
    else
        return (target.Humanoid.WalkToPoint - target.Head.Position).Unit
    end
end

local __namecall;
__namecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if args[1] == "Clicked" and getgenv().qbaimbotenabled then
        local newArgs = { "Clicked", Player.Character.Head.Position, Player.Character.Head.Position + data.Direction * 10000, (game.PlaceId == 8206123457 and data.Power) or 95, math.round(data.Power) }
        return __namecall(self, unpack(newArgs))
    end
    return __namecall(self, ...)
end)

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and Player.PlayerGui:FindFirstChild("BallGui") then
        if input.KeyCode == Enum.KeyCode.R then
            while UserInputService:IsKeyDown(Enum.KeyCode.R) do
                data.Angle = data.Angle + 5
                data.Angle = math.clamp(data.Angle, 5, 90)
                wait(1/6)
            end
        elseif input.KeyCode == Enum.KeyCode.F then
            while UserInputService:IsKeyDown(Enum.KeyCode.F) do
                data.Angle = data.Angle - 5
                data.Angle = math.clamp(data.Angle, 5, 90)
                wait(1/6)
            end
        elseif input.KeyCode == Enum.KeyCode.Q then
            locked = not locked
        elseif input.KeyCode == Enum.KeyCode.Z then
            passType = passTypeSwitch[passType]
        end
    end
end)

local function BeamProjectile(g, v0, x0, t1)
    local c = 0.5 * 0.5 * 0.5
    local p3 = 0.5 * g * t1 * t1 + v0 * t1 + x0
    local p2 = p3 - (g * t1 * t1 + v0 * t1) / 3
    local p1 = (c * g * t1 * t1 + 0.5 * v0 * t1 + x0 - c * (x0 + p3)) / (3 * c) - p2

    local curve0 = (p1 - x0).Magnitude
    local curve1 = (p2 - p3).Magnitude

    local b = (x0 - p3).Unit
    local r1 = (p1 - x0).Unit
    local u1 = r1:Cross(b).Unit
    local r2 = (p2 - p3).Unit
    local u2 = r2:Cross(b).Unit
    b = u1:Cross(r1).Unit

    local cf1 = CFrame.new(
        x0.x, x0.y, x0.z,
        r1.x, u1.x, b.x,
        r1.y, u1.y, b.y,
        r1.z, u1.z, b.z
    )

    local cf2 = CFrame.new(
        p3.x, p3.y, p3.z,
        r2.x, u2.x, b.x,
        r2.y, u2.y, b.y,
        r2.z, u2.z, b.z
    )

    return curve0, -curve1, cf1, cf2
end

Gui.Enabled = false

if syn and syn.protect_gui then
    syn.protect_gui(Gui)
end

Gui.Parent = (gethui and gethui()) or game:GetService("CoreGui"):FindFirstChild("RobloxGui")

task.spawn(function()
    while task.wait() do
        if not locked then
            target = FindTarget()
        end

        if target and getgenv().qbaimbotenabled and Player.PlayerGui:FindFirstChild("BallGui") and Player.Character:FindFirstChild("Head") and target:FindFirstChild("HumanoidRootPart") then
            Gui.Enabled = not getgenv().hideDeco
            Beam.Enabled = getgenv().showArcTracer

            local moveDirection = GetMoveDirection(target)
            local angleAddition = (moveDirection.Magnitude > 0 and 5) or 0
            local leadDistance = passTypeLeads[passType] + (5)
            local estimatedPosition = target.Head.Position + (moveDirection * leadDistance) + Vector3.new(0, getgenv().customTargetHeight or 0, 0)

            local forwardOffset = Vector3.new(0, 0, 10)
            estimatedPosition = estimatedPosition + (moveDirection * forwardOffset)

            local t = CalculateTimeToPeak(Player.Character.Head.Position, estimatedPosition, CalculatePeakHeight(Player.Character.Head.Position, estimatedPosition, data.Angle + angleAddition)) or 0.5

            local vel, direction, power = CalculateVelocity(Player.Character.Head.Position, estimatedPosition, t, moveDirection)

            local degrees = nil

            if getgenv().autoAngle then
                local g = workspace.Gravity
                local R = estimatedPosition.Magnitude
                local V = math.round(power)
                local a0 = 0.5 * math.atan(g * R / (V^2)) 
                degrees = math.floor(math.deg(a0))
            end

            local catchers = FindPossibleCatchers(power, direction)
            local landing, airtime = CalculateLanding(power, direction)
            local c0, c1, cf1, cf2 = BeamProjectile(Vector3.new(0, -28, 0), power * direction, Player.Character.Head.Position + (direction * 5), 7)
            local isInterceptable = false

            for _, catcher in pairs(catchers) do
                local team = catcher.Team

                if team ~= Player.Team then
                    isInterceptable = true
                    break
                end
            end

            Part.Position = landing
            Part.Transparency = (getgenv().predictBallArc and 0) or 1
            Part.Color = Color3.fromRGB(255, 11, 202)

            Beam.CurveSize0 = c0
            Beam.CurveSize1 = c1

            Attachment0.CFrame = Attachment0.Parent.CFrame:Inverse() * cf1
            Attachment1.CFrame = Attachment1.Parent.CFrame:Inverse() * cf2

            data.Direction = direction
            data.Power = power

            Highlight.Parent = target
            Highlight.Enabled = not getgenv().hideDeco

            if not getgenv().autoAngle then
                Gui.Frame.pwr.value.Text = power
                Gui.Frame.player.value.Text = target.Name
                Gui.Frame.angle.value.Text = data.Angle
                Gui.Frame.mode.value.Text = passType
            else
                Gui.Frame.pwr.value.Text = power
                Gui.Frame.player.value.Text = target.Name
                Gui.Frame.angle.value.Text = degrees
                Gui.Frame.mode.value.Text = passType
            end
        else
            Gui.Enabled = false
            Highlight.Parent = nil
        end
    end
end)
--mag

print("EcpliseHub Loaded")
